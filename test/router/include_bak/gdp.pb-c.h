/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: gdp.proto */

#ifndef PROTOBUF_C_gdp_2eproto__INCLUDED
#define PROTOBUF_C_gdp_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

//------------------------------------------------------------------------------
//	Added for C++ compability
extern "C"{
//------------------------------------------------------------------------------
PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _GdpMessage GdpMessage;
typedef struct _GdpMessage__CmdAdvertise GdpMessage__CmdAdvertise;
typedef struct _GdpMessage__CmdCreate GdpMessage__CmdCreate;
typedef struct _GdpMessage__CmdOpen GdpMessage__CmdOpen;
typedef struct _GdpMessage__CmdClose GdpMessage__CmdClose;
typedef struct _GdpMessage__CmdAppend GdpMessage__CmdAppend;
typedef struct _GdpMessage__CmdReadByRecno GdpMessage__CmdReadByRecno;
typedef struct _GdpMessage__CmdReadByTs GdpMessage__CmdReadByTs;
typedef struct _GdpMessage__CmdReadByHash GdpMessage__CmdReadByHash;
typedef struct _GdpMessage__CmdSubscribeByRecno GdpMessage__CmdSubscribeByRecno;
typedef struct _GdpMessage__CmdSubscribeByTs GdpMessage__CmdSubscribeByTs;
typedef struct _GdpMessage__CmdSubscribeByHash GdpMessage__CmdSubscribeByHash;
typedef struct _GdpMessage__CmdUnsubscribe GdpMessage__CmdUnsubscribe;
typedef struct _GdpMessage__CmdGetMetadata GdpMessage__CmdGetMetadata;
typedef struct _GdpMessage__CmdDelete GdpMessage__CmdDelete;
typedef struct _GdpMessage__AckSuccess GdpMessage__AckSuccess;
typedef struct _GdpMessage__AckChanged GdpMessage__AckChanged;
typedef struct _GdpMessage__AckContent GdpMessage__AckContent;
typedef struct _GdpMessage__AckEndOfResults GdpMessage__AckEndOfResults;
typedef struct _GdpMessage__NakGeneric GdpMessage__NakGeneric;
typedef struct _GdpMessage__NakConflict GdpMessage__NakConflict;
typedef struct _GdpDatum GdpDatum;
typedef struct _GdpProof GdpProof;
typedef struct _GdpTimestamp GdpTimestamp;
typedef struct _GdpMetadata GdpMetadata;
typedef struct _GdpSignature GdpSignature;
typedef struct _GdpDatumList GdpDatumList;


/* --- enums --- */

typedef enum _GdpMsgCode {
  /*
   * 0-63		Blind commands (no response)
   */
  /*
   * no command (can use as keepalive)
   */
  GDP_MSG_CODE__CMD_NONE = 0,
  /*
   *XXX moved to L4
   */
  GDP_MSG_CODE__CMD_ADVERTISE = 1,
  /*
   *XXX moved to L4
   */
  GDP_MSG_CODE__CMD_WITHDRAW = 2,
  /*
   * 64-127	Acknowledged commands
   */
  GDP_MSG_CODE__CMD_PING = 64,
  GDP_MSG_CODE__CMD_HELLO = 65,
  GDP_MSG_CODE__CMD_CREATE = 66,
  GDP_MSG_CODE__CMD_OPEN_AO = 67,
  GDP_MSG_CODE__CMD_OPEN_RO = 68,
  GDP_MSG_CODE__CMD_OPEN_RA = 69,
  GDP_MSG_CODE__CMD_CLOSE = 70,
  GDP_MSG_CODE__CMD_APPEND = 71,
  GDP_MSG_CODE__CMD_READ_BY_RECNO = 72,
  GDP_MSG_CODE__CMD_READ_BY_TS = 73,
  GDP_MSG_CODE__CMD_READ_BY_HASH = 74,
  GDP_MSG_CODE__CMD_SUBSCRIBE_BY_RECNO = 75,
  GDP_MSG_CODE__CMD_SUBSCRIBE_BY_TS = 76,
  GDP_MSG_CODE__CMD_SUBSCRIBE_BY_HASH = 77,
  GDP_MSG_CODE__CMD_UNSUBSCRIBE = 78,
  GDP_MSG_CODE__CMD_GETMETADATA = 79,
  /*
   *	CMD_FWD_APPEND =			127;		//XXX moved to L4
   */
  GDP_MSG_CODE__CMD_DELETE = 81,
  /*
   * 128-191	Positive Acks (HTTP 200-263)
   */
  /*
   * HTTP 200
   */
  GDP_MSG_CODE__ACK_SUCCESS = 128,
  /*
   * HTTP 201
   */
  GDP_MSG_CODE__ACK_CREATED = 129,
  /*
   * HTTP 202
   */
  GDP_MSG_CODE__ACK_DELETED = 130,
  /*
   * HTTP 203
   */
  GDP_MSG_CODE__ACK_VALID = 131,
  /*
   * no direct HTTP equiv XXX used???
   */
  GDP_MSG_CODE__ACK_CHANGED = 132,
  /*
   * no direct HTTP equivalent
   */
  GDP_MSG_CODE__ACK_CONTENT = 133,
  /*
   * no more results (no HTTP equiv)
   */
  GDP_MSG_CODE__ACK_END_OF_RESULTS = 191,
  /*
   * 192-233	Negative acks, client side (CoAP, HTTP 400-431)
   */
  /*
   * HTTP 400
   */
  GDP_MSG_CODE__NAK_C_BADREQ = 192,
  /*
   * HTTP 401
   */
  GDP_MSG_CODE__NAK_C_UNAUTH = 193,
  /*
   * HTTP 402
   */
  GDP_MSG_CODE__NAK_C_BADOPT = 194,
  /*
   * HTTP 403
   */
  GDP_MSG_CODE__NAK_C_FORBIDDEN = 195,
  /*
   * HTTP 404
   */
  GDP_MSG_CODE__NAK_C_NOTFOUND = 196,
  /*
   * HTTP 405
   */
  GDP_MSG_CODE__NAK_C_METHNOTALLOWED = 197,
  /*
   * HTTP 409
   */
  GDP_MSG_CODE__NAK_C_CONFLICT = 201,
  /*
   * HTTP 410
   */
  GDP_MSG_CODE__NAK_C_GONE = 202,
  /*
   * HTTP 412
   */
  GDP_MSG_CODE__NAK_C_PRECONFAILED = 204,
  /*
   * HTTP 413
   */
  GDP_MSG_CODE__NAK_C_TOOLARGE = 205,
  /*
   * HTTP 415
   */
  GDP_MSG_CODE__NAK_C_UNSUPMEDIA = 207,
  /*
   * record missing (no HTTP equiv)
   */
  GDP_MSG_CODE__NAK_C_REC_MISSING = 222,
  /*
   * multiple records (no HTTP equiv)
   */
  GDP_MSG_CODE__NAK_C_REC_DUP = 223,
  /*
   * 224-239	Negative acks, server side (CoAP, HTTP 500-515)
   */
  /*
   * HTTP 500
   */
  GDP_MSG_CODE__NAK_S_INTERNAL = 224,
  /*
   * HTTP 501
   */
  GDP_MSG_CODE__NAK_S_NOTIMPL = 225,
  /*
   * HTTP 502
   */
  GDP_MSG_CODE__NAK_S_BADGATEWAY = 226,
  /*
   * HTTP 503
   */
  GDP_MSG_CODE__NAK_S_SVCUNAVAIL = 227,
  /*
   * HTTP 504
   */
  GDP_MSG_CODE__NAK_S_GWTIMEOUT = 228,
  /*
   * HTTP 505
   */
  GDP_MSG_CODE__NAK_S_PROXYNOTSUP = 229,
  /*
   * lost subscription (no HTTP equiv)
   */
  GDP_MSG_CODE__NAK_S_LOST_SUBSCR = 239,
  /*
   * 240-254	Negative acks, routing layer
   */
  /*
   * no HTTP equiv	XXX remove?
   */
  GDP_MSG_CODE__NAK_R_NOROUTE = 240
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GDP_MSG_CODE)
} GdpMsgCode;

/* --- messages --- */

/*
 *XXX This really doesn't belong here: it is in Layer 4 now
 */
struct  _GdpMessage__CmdAdvertise
{
  ProtobufCMessage base;
  /*
   * name to advertise
   */
  ProtobufCBinaryData adname;
};
#define GDP_MESSAGE__CMD_ADVERTISE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_advertise__descriptor) \
    , {0,NULL} }


/*
 * Create a new log
 * This is addressed to the log server, not the log itself.
 *  ... logname will ultimately just be the hash of the metadata,
 *		at which point it can go away.
 */
struct  _GdpMessage__CmdCreate
{
  ProtobufCMessage base;
  /*
   * log metadata
   */
  GdpMetadata *metadata;
  /*
   * name of new log
   */
  protobuf_c_boolean has_logname;
  ProtobufCBinaryData logname;
};
#define GDP_MESSAGE__CMD_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_create__descriptor) \
    , NULL, 0, {0,NULL} }


/*
 * Open a log.  Someday this may need to have access information,
 * QoS requirements, etc.
 */
struct  _GdpMessage__CmdOpen
{
  ProtobufCMessage base;
};
#define GDP_MESSAGE__CMD_OPEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_open__descriptor) \
     }


/*
 * Close a log.
 */
struct  _GdpMessage__CmdClose
{
  ProtobufCMessage base;
};
#define GDP_MESSAGE__CMD_CLOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_close__descriptor) \
     }


struct  _GdpMessage__CmdAppend
{
  ProtobufCMessage base;
  /*
   * data list to append
   */
  GdpDatumList *dl;
};
#define GDP_MESSAGE__CMD_APPEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_append__descriptor) \
    , NULL }


/*
 * Read a record based on the record number.  Returns a set.
 * If recno is negative, it is relative to the greatest recno
 * in the log.
 */
struct  _GdpMessage__CmdReadByRecno
{
  ProtobufCMessage base;
  /*
   * record number
   */
  int64_t recno;
  protobuf_c_boolean has_nrecs;
  int32_t nrecs;
};
#define GDP_MESSAGE__CMD_READ_BY_RECNO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_read_by_recno__descriptor) \
    , 0, 0, -1 }


/*
 * Read a record based on the timestamp.  Returns a set.
 */
struct  _GdpMessage__CmdReadByTs
{
  ProtobufCMessage base;
  /*
   * timestamp
   */
  GdpTimestamp *timestamp;
  protobuf_c_boolean has_nrecs;
  int32_t nrecs;
};
#define GDP_MESSAGE__CMD_READ_BY_TS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_read_by_ts__descriptor) \
    , NULL, 0, -1 }


/*
 * Read a record based on the hash of the data.  Should always be unique;
 * hence, we do not need nrecs.
 */
struct  _GdpMessage__CmdReadByHash
{
  ProtobufCMessage base;
  /*
   * hash value
   */
  ProtobufCBinaryData hash;
};
#define GDP_MESSAGE__CMD_READ_BY_HASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_read_by_hash__descriptor) \
    , {0,NULL} }


/*
 * Subscribe to a log starting from a given record number.
 */
struct  _GdpMessage__CmdSubscribeByRecno
{
  ProtobufCMessage base;
  /*
   * starting record number
   */
  protobuf_c_boolean has_start;
  int64_t start;
  /*
   * number of records
   */
  protobuf_c_boolean has_nrecs;
  int32_t nrecs;
  /*
   * timeout
   */
  GdpTimestamp *timeout;
};
#define GDP_MESSAGE__CMD_SUBSCRIBE_BY_RECNO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_subscribe_by_recno__descriptor) \
    , 0, 0, 0, 0, NULL }


/*
 * Subscribe to a log starting from a particular timestamp.
 */
struct  _GdpMessage__CmdSubscribeByTs
{
  ProtobufCMessage base;
  /*
   * starting timestamp
   */
  GdpTimestamp *timestamp;
  /*
   * number of records
   */
  protobuf_c_boolean has_nrecs;
  int32_t nrecs;
  /*
   * timeout
   */
  GdpTimestamp *timeout;
};
#define GDP_MESSAGE__CMD_SUBSCRIBE_BY_TS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_subscribe_by_ts__descriptor) \
    , NULL, 0, 0, NULL }


/*
 * Subscribe to a lot starting from a given datum hash.
 *XXX	It isn't clear how subscriptions work in the presence of
 *		data forks.
 */
struct  _GdpMessage__CmdSubscribeByHash
{
  ProtobufCMessage base;
  /*
   * hash value
   */
  ProtobufCBinaryData hash;
  /*
   * number of records
   */
  protobuf_c_boolean has_nrecs;
  int32_t nrecs;
  /*
   * timeout
   */
  GdpTimestamp *timeout;
};
#define GDP_MESSAGE__CMD_SUBSCRIBE_BY_HASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_subscribe_by_hash__descriptor) \
    , {0,NULL}, 0, 0, NULL }


/*
 * Cancel a subscription.
 */
struct  _GdpMessage__CmdUnsubscribe
{
  ProtobufCMessage base;
};
#define GDP_MESSAGE__CMD_UNSUBSCRIBE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_unsubscribe__descriptor) \
     }


/*
 * Get the metadata for a given log.
 */
struct  _GdpMessage__CmdGetMetadata
{
  ProtobufCMessage base;
};
#define GDP_MESSAGE__CMD_GET_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_get_metadata__descriptor) \
     }


/*
 * Delete a log.  Someday, maybe.
 */
struct  _GdpMessage__CmdDelete
{
  ProtobufCMessage base;
};
#define GDP_MESSAGE__CMD_DELETE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__cmd_delete__descriptor) \
     }


/*
 * Generic success acknowledgement (shared).
 */
struct  _GdpMessage__AckSuccess
{
  ProtobufCMessage base;
  protobuf_c_boolean has_recno;
  uint64_t recno;
  GdpTimestamp *ts;
  protobuf_c_boolean has_hash;
  ProtobufCBinaryData hash;
  protobuf_c_boolean has_metadata;
  ProtobufCBinaryData metadata;
};
#define GDP_MESSAGE__ACK_SUCCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__ack_success__descriptor) \
    , 0, 0, NULL, 0, {0,NULL}, 0, {0,NULL} }


struct  _GdpMessage__AckChanged
{
  ProtobufCMessage base;
  uint64_t recno;
};
#define GDP_MESSAGE__ACK_CHANGED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__ack_changed__descriptor) \
    , 0 }


/*
 * Data content; used for READ and SUBSCRIBE results.
 * Note: can return a set if there are duplicate recnos.
 */
struct  _GdpMessage__AckContent
{
  ProtobufCMessage base;
  /*
   * returned data list
   */
  GdpDatumList *dl;
  /*
   * set if more data possible
   */
  protobuf_c_boolean has_moredata;
  protobuf_c_boolean moredata;
};
#define GDP_MESSAGE__ACK_CONTENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__ack_content__descriptor) \
    , NULL, 0, 0 }


/*
 * End of results
 */
struct  _GdpMessage__AckEndOfResults
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ep_stat;
  uint32_t ep_stat;
  /*
   * number of results
   */
  protobuf_c_boolean has_nresults;
  uint64_t nresults;
};
#define GDP_MESSAGE__ACK_END_OF_RESULTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__ack_end_of_results__descriptor) \
    , 0, 0, 0, 0 }


/*
 * Generic failure (shared).
 */
struct  _GdpMessage__NakGeneric
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ep_stat;
  uint32_t ep_stat;
  char *description;
  protobuf_c_boolean has_recno;
  uint64_t recno;
};
#define GDP_MESSAGE__NAK_GENERIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__nak_generic__descriptor) \
    , 0, 0, NULL, 0, 0 }


/*
 * Unclear why this doesn't just share NakGeneric.
 */
struct  _GdpMessage__NakConflict
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ep_stat;
  uint32_t ep_stat;
  char *description;
  protobuf_c_boolean has_recno;
  uint64_t recno;
};
#define GDP_MESSAGE__NAK_CONFLICT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__nak_conflict__descriptor) \
    , 0, 0, NULL, 0, 0 }


typedef enum {
  GDP_MESSAGE__BODY__NOT_SET = 0,
  GDP_MESSAGE__BODY_CMD_CREATE = 66,
  GDP_MESSAGE__BODY_CMD_OPEN = 67,
  GDP_MESSAGE__BODY_CMD_CLOSE = 70,
  GDP_MESSAGE__BODY_CMD_APPEND = 71,
  GDP_MESSAGE__BODY_CMD_READ_BY_RECNO = 72,
  GDP_MESSAGE__BODY_CMD_READ_BY_TS = 73,
  GDP_MESSAGE__BODY_CMD_READ_BY_HASH = 74,
  GDP_MESSAGE__BODY_CMD_SUBSCRIBE_BY_RECNO = 75,
  GDP_MESSAGE__BODY_CMD_SUBSCRIBE_BY_TS = 76,
  GDP_MESSAGE__BODY_CMD_SUBSCRIBE_BY_HASH = 77,
  GDP_MESSAGE__BODY_CMD_UNSUBSCRIBE = 78,
  GDP_MESSAGE__BODY_CMD_GET_METADATA = 79,
  GDP_MESSAGE__BODY_CMD_DELETE = 81,
  GDP_MESSAGE__BODY_ACK_SUCCESS = 128,
  GDP_MESSAGE__BODY_ACK_CHANGED = 132,
  GDP_MESSAGE__BODY_ACK_CONTENT = 133,
  GDP_MESSAGE__BODY_ACK_END_OF_RESULTS = 191,
  GDP_MESSAGE__BODY_NAK = 192,
  GDP_MESSAGE__BODY_NAK_CONFLICT = 201
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GDP_MESSAGE__BODY)
} GdpMessage__BodyCase;

struct  _GdpMessage
{
  ProtobufCMessage base;
  /*
   * command or ack/nak
   */
  GdpMsgCode cmd;
  /*
   * request distinguisher
   */
  protobuf_c_boolean has_rid;
  uint32_t rid;
  /*
   * sequence number
   */
  protobuf_c_boolean has_l5seqno;
  uint32_t l5seqno;
  /*
   * commmand/response signature
   */
  GdpSignature *sig;
  GdpMessage__BodyCase body_case;
  union {
    GdpMessage__CmdCreate *cmd_create;
    GdpMessage__CmdOpen *cmd_open;
    GdpMessage__CmdClose *cmd_close;
    GdpMessage__CmdAppend *cmd_append;
    GdpMessage__CmdReadByRecno *cmd_read_by_recno;
    GdpMessage__CmdReadByTs *cmd_read_by_ts;
    GdpMessage__CmdReadByHash *cmd_read_by_hash;
    GdpMessage__CmdSubscribeByRecno *cmd_subscribe_by_recno;
    GdpMessage__CmdSubscribeByTs *cmd_subscribe_by_ts;
    GdpMessage__CmdSubscribeByHash *cmd_subscribe_by_hash;
    GdpMessage__CmdUnsubscribe *cmd_unsubscribe;
    GdpMessage__CmdGetMetadata *cmd_get_metadata;
    GdpMessage__CmdDelete *cmd_delete;
    GdpMessage__AckSuccess *ack_success;
    GdpMessage__AckChanged *ack_changed;
    GdpMessage__AckContent *ack_content;
    GdpMessage__AckEndOfResults *ack_end_of_results;
    GdpMessage__NakGeneric *nak;
    GdpMessage__NakConflict *nak_conflict;
  };
};
#define GDP_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_message__descriptor) \
    , GDP_MSG_CODE__CMD_NONE, 0, 0, 0, 0, NULL, GDP_MESSAGE__BODY__NOT_SET, {0} }


struct  _GdpDatum
{
  ProtobufCMessage base;
  /*
   * record number
   */
  int64_t recno;
  /*
   * timestamp
   */
  GdpTimestamp *ts;
  /*
   * hash of previous record
   */
  protobuf_c_boolean has_prevhash;
  ProtobufCBinaryData prevhash;
  /*
   * other hashes with offsets
   */
  size_t n_proof;
  GdpProof **proof;
  /*
   * actual content
   */
  ProtobufCBinaryData data;
  /*
   * signature over rest of datum
   */
  GdpSignature *sig;
};
#define GDP_DATUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_datum__descriptor) \
    , 0, NULL, 0, {0,NULL}, 0,NULL, {0,NULL}, NULL }


struct  _GdpProof
{
  ProtobufCMessage base;
  /*
   * record offset
   */
  uint64_t offset;
  /*
   * hash of that record
   */
  ProtobufCBinaryData hash;
};
#define GDP_PROOF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_proof__descriptor) \
    , 0, {0,NULL} }


struct  _GdpTimestamp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sec;
  int64_t sec;
  /*
   * EP_TIME_NOTIME = INT64_MIN + 1
   */
  protobuf_c_boolean has_nsec;
  uint32_t nsec;
  protobuf_c_boolean has_accuracy;
  float accuracy;
};
#define GDP_TIMESTAMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_timestamp__descriptor) \
    , 0, -9223372036854775807ll, 0, 0, 0, 0 }


struct  _GdpMetadata
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  /*
   * needed?
   */
  GdpSignature *sig;
};
#define GDP_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_metadata__descriptor) \
    , {0,NULL}, NULL }


struct  _GdpSignature
{
  ProtobufCMessage base;
  ProtobufCBinaryData sig;
};
#define GDP_SIGNATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_signature__descriptor) \
    , {0,NULL} }


struct  _GdpDatumList
{
  ProtobufCMessage base;
  /*
   * the list of datums
   */
  size_t n_d;
  GdpDatum **d;
};
#define GDP_DATUM_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gdp_datum_list__descriptor) \
    , 0,NULL }


/* GdpMessage__CmdAdvertise methods */
void   gdp_message__cmd_advertise__init
                     (GdpMessage__CmdAdvertise         *message);
/* GdpMessage__CmdCreate methods */
void   gdp_message__cmd_create__init
                     (GdpMessage__CmdCreate         *message);
/* GdpMessage__CmdOpen methods */
void   gdp_message__cmd_open__init
                     (GdpMessage__CmdOpen         *message);
/* GdpMessage__CmdClose methods */
void   gdp_message__cmd_close__init
                     (GdpMessage__CmdClose         *message);
/* GdpMessage__CmdAppend methods */
void   gdp_message__cmd_append__init
                     (GdpMessage__CmdAppend         *message);
/* GdpMessage__CmdReadByRecno methods */
void   gdp_message__cmd_read_by_recno__init
                     (GdpMessage__CmdReadByRecno         *message);
/* GdpMessage__CmdReadByTs methods */
void   gdp_message__cmd_read_by_ts__init
                     (GdpMessage__CmdReadByTs         *message);
/* GdpMessage__CmdReadByHash methods */
void   gdp_message__cmd_read_by_hash__init
                     (GdpMessage__CmdReadByHash         *message);
/* GdpMessage__CmdSubscribeByRecno methods */
void   gdp_message__cmd_subscribe_by_recno__init
                     (GdpMessage__CmdSubscribeByRecno         *message);
/* GdpMessage__CmdSubscribeByTs methods */
void   gdp_message__cmd_subscribe_by_ts__init
                     (GdpMessage__CmdSubscribeByTs         *message);
/* GdpMessage__CmdSubscribeByHash methods */
void   gdp_message__cmd_subscribe_by_hash__init
                     (GdpMessage__CmdSubscribeByHash         *message);
/* GdpMessage__CmdUnsubscribe methods */
void   gdp_message__cmd_unsubscribe__init
                     (GdpMessage__CmdUnsubscribe         *message);
/* GdpMessage__CmdGetMetadata methods */
void   gdp_message__cmd_get_metadata__init
                     (GdpMessage__CmdGetMetadata         *message);
/* GdpMessage__CmdDelete methods */
void   gdp_message__cmd_delete__init
                     (GdpMessage__CmdDelete         *message);
/* GdpMessage__AckSuccess methods */
void   gdp_message__ack_success__init
                     (GdpMessage__AckSuccess         *message);
/* GdpMessage__AckChanged methods */
void   gdp_message__ack_changed__init
                     (GdpMessage__AckChanged         *message);
/* GdpMessage__AckContent methods */
void   gdp_message__ack_content__init
                     (GdpMessage__AckContent         *message);
/* GdpMessage__AckEndOfResults methods */
void   gdp_message__ack_end_of_results__init
                     (GdpMessage__AckEndOfResults         *message);
/* GdpMessage__NakGeneric methods */
void   gdp_message__nak_generic__init
                     (GdpMessage__NakGeneric         *message);
/* GdpMessage__NakConflict methods */
void   gdp_message__nak_conflict__init
                     (GdpMessage__NakConflict         *message);
/* GdpMessage methods */
void   gdp_message__init
                     (GdpMessage         *message);
size_t gdp_message__get_packed_size
                     (const GdpMessage   *message);
size_t gdp_message__pack
                     (const GdpMessage   *message,
                      uint8_t             *out);
size_t gdp_message__pack_to_buffer
                     (const GdpMessage   *message,
                      ProtobufCBuffer     *buffer);
GdpMessage *
       gdp_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gdp_message__free_unpacked
                     (GdpMessage *message,
                      ProtobufCAllocator *allocator);
/* GdpDatum methods */
void   gdp_datum__init
                     (GdpDatum         *message);
size_t gdp_datum__get_packed_size
                     (const GdpDatum   *message);
size_t gdp_datum__pack
                     (const GdpDatum   *message,
                      uint8_t             *out);
size_t gdp_datum__pack_to_buffer
                     (const GdpDatum   *message,
                      ProtobufCBuffer     *buffer);
GdpDatum *
       gdp_datum__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gdp_datum__free_unpacked
                     (GdpDatum *message,
                      ProtobufCAllocator *allocator);
/* GdpProof methods */
void   gdp_proof__init
                     (GdpProof         *message);
size_t gdp_proof__get_packed_size
                     (const GdpProof   *message);
size_t gdp_proof__pack
                     (const GdpProof   *message,
                      uint8_t             *out);
size_t gdp_proof__pack_to_buffer
                     (const GdpProof   *message,
                      ProtobufCBuffer     *buffer);
GdpProof *
       gdp_proof__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gdp_proof__free_unpacked
                     (GdpProof *message,
                      ProtobufCAllocator *allocator);
/* GdpTimestamp methods */
void   gdp_timestamp__init
                     (GdpTimestamp         *message);
size_t gdp_timestamp__get_packed_size
                     (const GdpTimestamp   *message);
size_t gdp_timestamp__pack
                     (const GdpTimestamp   *message,
                      uint8_t             *out);
size_t gdp_timestamp__pack_to_buffer
                     (const GdpTimestamp   *message,
                      ProtobufCBuffer     *buffer);
GdpTimestamp *
       gdp_timestamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gdp_timestamp__free_unpacked
                     (GdpTimestamp *message,
                      ProtobufCAllocator *allocator);
/* GdpMetadata methods */
void   gdp_metadata__init
                     (GdpMetadata         *message);
size_t gdp_metadata__get_packed_size
                     (const GdpMetadata   *message);
size_t gdp_metadata__pack
                     (const GdpMetadata   *message,
                      uint8_t             *out);
size_t gdp_metadata__pack_to_buffer
                     (const GdpMetadata   *message,
                      ProtobufCBuffer     *buffer);
GdpMetadata *
       gdp_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gdp_metadata__free_unpacked
                     (GdpMetadata *message,
                      ProtobufCAllocator *allocator);
/* GdpSignature methods */
void   gdp_signature__init
                     (GdpSignature         *message);
size_t gdp_signature__get_packed_size
                     (const GdpSignature   *message);
size_t gdp_signature__pack
                     (const GdpSignature   *message,
                      uint8_t             *out);
size_t gdp_signature__pack_to_buffer
                     (const GdpSignature   *message,
                      ProtobufCBuffer     *buffer);
GdpSignature *
       gdp_signature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gdp_signature__free_unpacked
                     (GdpSignature *message,
                      ProtobufCAllocator *allocator);
/* GdpDatumList methods */
void   gdp_datum_list__init
                     (GdpDatumList         *message);
size_t gdp_datum_list__get_packed_size
                     (const GdpDatumList   *message);
size_t gdp_datum_list__pack
                     (const GdpDatumList   *message,
                      uint8_t             *out);
size_t gdp_datum_list__pack_to_buffer
                     (const GdpDatumList   *message,
                      ProtobufCBuffer     *buffer);
GdpDatumList *
       gdp_datum_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gdp_datum_list__free_unpacked
                     (GdpDatumList *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*GdpMessage__CmdAdvertise_Closure)
                 (const GdpMessage__CmdAdvertise *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdCreate_Closure)
                 (const GdpMessage__CmdCreate *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdOpen_Closure)
                 (const GdpMessage__CmdOpen *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdClose_Closure)
                 (const GdpMessage__CmdClose *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdAppend_Closure)
                 (const GdpMessage__CmdAppend *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdReadByRecno_Closure)
                 (const GdpMessage__CmdReadByRecno *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdReadByTs_Closure)
                 (const GdpMessage__CmdReadByTs *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdReadByHash_Closure)
                 (const GdpMessage__CmdReadByHash *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdSubscribeByRecno_Closure)
                 (const GdpMessage__CmdSubscribeByRecno *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdSubscribeByTs_Closure)
                 (const GdpMessage__CmdSubscribeByTs *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdSubscribeByHash_Closure)
                 (const GdpMessage__CmdSubscribeByHash *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdUnsubscribe_Closure)
                 (const GdpMessage__CmdUnsubscribe *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdGetMetadata_Closure)
                 (const GdpMessage__CmdGetMetadata *message,
                  void *closure_data);
typedef void (*GdpMessage__CmdDelete_Closure)
                 (const GdpMessage__CmdDelete *message,
                  void *closure_data);
typedef void (*GdpMessage__AckSuccess_Closure)
                 (const GdpMessage__AckSuccess *message,
                  void *closure_data);
typedef void (*GdpMessage__AckChanged_Closure)
                 (const GdpMessage__AckChanged *message,
                  void *closure_data);
typedef void (*GdpMessage__AckContent_Closure)
                 (const GdpMessage__AckContent *message,
                  void *closure_data);
typedef void (*GdpMessage__AckEndOfResults_Closure)
                 (const GdpMessage__AckEndOfResults *message,
                  void *closure_data);
typedef void (*GdpMessage__NakGeneric_Closure)
                 (const GdpMessage__NakGeneric *message,
                  void *closure_data);
typedef void (*GdpMessage__NakConflict_Closure)
                 (const GdpMessage__NakConflict *message,
                  void *closure_data);
typedef void (*GdpMessage_Closure)
                 (const GdpMessage *message,
                  void *closure_data);
typedef void (*GdpDatum_Closure)
                 (const GdpDatum *message,
                  void *closure_data);
typedef void (*GdpProof_Closure)
                 (const GdpProof *message,
                  void *closure_data);
typedef void (*GdpTimestamp_Closure)
                 (const GdpTimestamp *message,
                  void *closure_data);
typedef void (*GdpMetadata_Closure)
                 (const GdpMetadata *message,
                  void *closure_data);
typedef void (*GdpSignature_Closure)
                 (const GdpSignature *message,
                  void *closure_data);
typedef void (*GdpDatumList_Closure)
                 (const GdpDatumList *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    gdp_msg_code__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_advertise__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_create__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_open__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_close__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_append__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_read_by_recno__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_read_by_ts__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_read_by_hash__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_subscribe_by_recno__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_subscribe_by_ts__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_subscribe_by_hash__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_unsubscribe__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_get_metadata__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__cmd_delete__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__ack_success__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__ack_changed__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__ack_content__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__ack_end_of_results__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__nak_generic__descriptor;
extern const ProtobufCMessageDescriptor gdp_message__nak_conflict__descriptor;
extern const ProtobufCMessageDescriptor gdp_datum__descriptor;
extern const ProtobufCMessageDescriptor gdp_proof__descriptor;
extern const ProtobufCMessageDescriptor gdp_timestamp__descriptor;
extern const ProtobufCMessageDescriptor gdp_metadata__descriptor;
extern const ProtobufCMessageDescriptor gdp_signature__descriptor;
extern const ProtobufCMessageDescriptor gdp_datum_list__descriptor;

PROTOBUF_C__END_DECLS

//------------------------------------------------------------------------------
//	Added for C++ compability
}
//------------------------------------------------------------------------------

#endif  /* PROTOBUF_C_gdp_2eproto__INCLUDED */
