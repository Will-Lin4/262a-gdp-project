<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="StockTickKVstore" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[200.0, 120.0]">
        </property>
    </property>
    <property name="SynchronizeToRealTime" class="ptolemy.actor.lib.SynchronizeToRealTime">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 120.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={152, 119, 914, 603}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 514]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.9392946781809673">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{342.21875000000017, 352.6614130434783}">
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="5.0">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 320.0]">
        </property>
    </entity>
    <entity name="StockTick" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2015 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Retrieve a stock price from a Yahoo server.&#10; *  This accessor reacts to a *symbol* input by issuing a query to a web server&#10; *  for the most recent trade prices of the common stock whose symbol is given&#10; *  by the input. When the server replies, this accessor produces the most&#10; *  recent trade price on the *price* output.&#10; *&#10; *  The request to the web server is asynchronous. This means that the outputs&#10; *  may not be produced in the same order as the inputs.&#10; *  FIXME: This is seriously problematic. Probably should change this to use&#10; *  a blocking call by default.&#10; *&#10; *  This accessor requires the optional 'httpClient' module, which may or may&#10; *  not be provided by an accessor host. Most hosts will provide this module.&#10; *&#10; *  @accessor services/StockTick&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id: StockTick.js 292 2015-09-01 14:16:50Z eal $$&#10; *  @input {string} symbol The stock symbol. Default value is 'YHOO'.&#10; *  @output {number} price The most recent trade price for the stock.&#10; */&#10;var http = require('httpClient');&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function() {&#10;    input('symbol', {&#10;        'value':'YHOO',&#10;        'type':'string'&#10;    });&#10;    output('price', {&#10;        'type':'number'&#10;    });&#10;};&#10;&#10;/** Function that retrieves the stock price.&#10; */&#10;function getPrice() {&#10;    // Read the current value of the 'symbol' input.&#10;    var stock = get('symbol');&#10;    // Construct a URL to obtain a stock price.&#10;    var url = &quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(%22&quot;&#10;        + stock&#10;        + &quot;%22)%0A%09%09&amp;env=http%3A%2F%2Fdatatables.org%2Falltables.env&amp;format=json&quot;;&#10;    // Request a stock price, and provide a function to handle the response.&#10;    http.get(url, function(response) {&#10;        // Assuming the response is JSON, parse it.&#10;        var json = JSON.parse(response.body);&#10;        // Extract the last trade price from the JSON record.&#10;        var price = parseFloat(json.query.results.quote.LastTradePriceOnly);&#10;        // Send the price to the 'price' output.&#10;        send('price', price);&#10;    });&#10;}&#10;&#10;var handle = null;&#10;&#10;/** Initialize the accessor by attaching an input handler to the *symbol* input. */&#10;exports.initialize = function() {&#10;    // Invoke the getPrice function each time a 'symbol' input arrives.&#10;    handle = addInputHandler('symbol', getPrice);&#10;}&#10;&#10;/** Remove the input handler. */&#10;exports.wrapup = function() {&#10;    // Failing to do this will likely trigger an exception when the model stops running,&#10;    // because the getPrice() function will attempt to send an output after the model&#10;    // has stopped.&#10;    removeInputHandler(handle, 'symbol');&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/home/mor/works/ptolemy/ptII/org/terraswarm/accessor/accessors/web/services/StockTick.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Retrieve a stock price from a Yahoo server.&#10; This accessor reacts to a &lt;em&gt;symbol&lt;/em&gt; input by issuing a query to a web server&#10; for the most recent trade prices of the common stock whose symbol is given&#10; by the input. When the server replies, this accessor produces the most&#10; recent trade price on the &lt;em&gt;price&lt;/em&gt; output.&lt;/p&gt;&#10;&lt;p&gt; The request to the web server is asynchronous. This means that the outputs&#10; may not be produced in the same order as the inputs.&#10; FIXME: This is seriously problematic. Probably should change this to use&#10; a blocking call by default.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires the optional 'httpClient' module, which may or may&#10; not be provided by an accessor host. Most hosts will provide this module.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: StockTick.js 292 2015-09-01 14:16:50Z eal $$">
            </property>
            <property name="symbol (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;string&quot;]}) The stock symbol. Default value is 'YHOO'.">
            </property>
            <property name="price (port)" class="ptolemy.kernel.util.StringAttribute" value="({names:[&quot;number&quot;]}) The most recent trade price for the stock.">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[395.0, 390.0]">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="symbol" class="ptolemy.actor.parameters.PortParameter" value="YHOO">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="symbol" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="price" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="MonitorValue" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[625.0, 425.0]">
        </property>
    </entity>
    <entity name="KVstore" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/* Accessor for GDP Key-Value Store */&#10;&#10;var httpClient = require('httpClient');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    input('trigger');&#10;    input('write', {'type': 'boolean', 'value': false});&#10;    input('key', {'type':'string'});&#10;    input('ts', {'type':'string'});&#10;    input('value', {'type': 'string'});&#10;    output('output', {'type':'string'});&#10;    parameter('url', {'type':'string', 'value':''});&#10;};&#10;&#10;&#10;// This is where we create the request that will be sent to httpClient&#10;exports.makeRequest = function() {&#10;&#10;    var ret = {};&#10;    var ts = get('ts');&#10;    var key = get('key');&#10;    var url = get('url');&#10;    console.log(get('write'));&#10;    if (get('write') == true) {&#10;        ret.method = &quot;PUT&quot;;&#10;        ret.body = get('value');&#10;        ret.url = url + key;&#10;    } else {&#10;        ret.method = &quot;GET&quot;;&#10;        var tmp = url + &quot;key=&quot; + key;&#10;        if (ts !== null) {&#10;            var _ts = ts.replace(&quot;000000&quot;, &quot;&quot;);&#10;            var d = Date.parse(_ts)/1000.0;        //milliseconds&#10;            tmp = tmp + &quot;&amp;ts=&quot; + d;&#10;        }&#10;        ret.url = tmp;&#10;    }&#10;&#10;    return ret;&#10;}&#10;&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;// Based on the REST accessor.&#10;exports.issueCommand = function(callback) {&#10;&#10;    var req = this.makeRequest()&#10;    &#10;    // To ensure that the callback is called with the same context&#10;    // as this function, create a new function.&#10;    var thiz = this;&#10;    var contextCallback = function() {&#10;        callback.apply(thiz, arguments);&#10;    }&#10;    &#10;    request = httpClient.request(req, contextCallback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;};&#10;&#10;exports.handleResponse = function(message) {&#10;    if (message !== null &amp;&amp; message !== undefined) {&#10;        send('output', JSON.parse(message.body).value);&#10;    } else {&#10;        send('output', null);&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;	addInputHandler('trigger', this.issueCommand, this.handleResponse);&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/home/mor/works/gdp/gdp/demo/201510/accessor/GDP.accessor/KVstore.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[655.0, 325.0]">
        </property>
        <property name="write" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="url" class="ptolemy.data.expr.Parameter" value="http://localhost:8811/">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="write" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="key" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="ts" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="value" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="StringConst" class="ptolemy.actor.lib.StringConst">
        <property name="value" class="ptolemy.data.expr.Parameter" value="EMC">
        </property>
        <doc>Create a constant sequence with a string value.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="80">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[220.0, 320.0]">
        </property>
    </entity>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[310.0, 320.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[490.0, 345.0]">
        </vertex>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation2"/>
    <link port="StockTick.symbol" relation="relation4"/>
    <link port="StockTick.price" relation="relation"/>
    <link port="MonitorValue.input" relation="relation"/>
    <link port="KVstore.trigger" relation="relation"/>
    <link port="KVstore.key" relation="relation4"/>
    <link port="KVstore.value" relation="relation"/>
    <link port="StringConst.output" relation="relation4"/>
    <link port="StringConst.trigger" relation="relation2"/>
</entity>
