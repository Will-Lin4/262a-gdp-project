<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="model-reader" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[140.0, 55.0]">
        </property>
    </property>
    <property name="SynchronizeToRealTime" class="ptolemy.actor.lib.SynchronizeToRealTime">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[240.0, 55.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 52, 683, 716}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[469, 627]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.5483870967741935">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{505.50000000000006, 581.9338235294118}">
    </property>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="1.0">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{180.0, 263.0}">
        </property>
    </entity>
    <entity name="StringConst" class="ptolemy.actor.lib.StringConst">
        <property name="value" class="ptolemy.data.expr.Parameter" value="key1">
        </property>
        <doc>Create a constant sequence with a string value.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="80">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[450.0, 200.0]">
        </property>
    </entity>
    <entity name="KVstore" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/* Accessor for GDP Key-Value Store */&#10;&#10;var httpClient = require('httpClient');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    input('trigger');&#10;    input('write', {'type': 'boolean', 'value': false});&#10;    input('key', {'type':'string'});&#10;    input('ts', {'type':'string'});&#10;    input('value', {'type': 'string'});&#10;    output('output', {'type':'string'});&#10;    parameter('url', {'type':'string', 'value':''});&#10;};&#10;&#10;&#10;// This is where we create the request that will be sent to httpClient&#10;exports.makeRequest = function() {&#10;&#10;    var ret = {};&#10;    var ts = get('ts');&#10;    var key = get('key');&#10;    var url = get('url');&#10;    console.log(get('write'));&#10;    if (get('write') == true) {&#10;        ret.method = &quot;PUT&quot;;&#10;        ret.body = get('value');&#10;        ret.url = url + key;&#10;    } else {&#10;        ret.method = &quot;GET&quot;;&#10;        var tmp = url + &quot;key=&quot; + key;&#10;        if (ts !== null) {&#10;            var _ts = ts.replace(&quot;000000&quot;, &quot;&quot;);&#10;            var d = Date.parse(_ts)/1000.0;        //milliseconds&#10;            tmp = tmp + &quot;&amp;ts=&quot; + d;&#10;        }&#10;        ret.url = tmp;&#10;    }&#10;&#10;    return ret;&#10;}&#10;&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;// Based on the REST accessor.&#10;exports.issueCommand = function(callback) {&#10;&#10;    var req = this.makeRequest()&#10;    &#10;    // To ensure that the callback is called with the same context&#10;    // as this function, create a new function.&#10;    var thiz = this;&#10;    var contextCallback = function() {&#10;        callback.apply(thiz, arguments);&#10;    }&#10;    &#10;    request = httpClient.request(req, contextCallback);&#10;    request.on('error', function(message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    request.end();&#10;};&#10;&#10;exports.handleResponse = function(message) {&#10;    if (message !== null &amp;&amp; message !== undefined) {&#10;        send('output', JSON.parse(message.body).value);&#10;    } else {&#10;        send('output', null);&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;	addInputHandler('trigger', this.issueCommand, this.handleResponse);&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/home/mor/works/ptolemy/ptII/org/terraswarm/accessor/accessors/web/GDP/KVstore.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[716.8921813964844, 133.9534683227539]">
        </property>
        <property name="url" class="ptolemy.data.expr.Parameter" value="http://localhost:8811/">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="write" class="ptolemy.actor.parameters.PortParameter" value="false">
        </property>
        <port name="write" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="key" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="ts" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="value" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="MonitorValue" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[850.0, 215.0]">
        </property>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[335.0, 240.0]">
        </vertex>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="DiscreteClock.output" relation="relation3"/>
    <link port="StringConst.output" relation="relation4"/>
    <link port="StringConst.trigger" relation="relation3"/>
    <link port="KVstore.trigger" relation="relation3"/>
    <link port="KVstore.key" relation="relation4"/>
    <link port="KVstore.output" relation="relation6"/>
    <link port="MonitorValue.input" relation="relation6"/>
</entity>
